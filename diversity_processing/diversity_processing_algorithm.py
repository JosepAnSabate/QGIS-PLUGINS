# -*- coding: utf-8 -*-

"""
/***************************************************************************
 DiversityProcessing
                                 A QGIS plugin
 Calculates several common indices of diversity
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                              -------------------
        begin                : 2021-10-08
        copyright            : (C) 2021 by Josep ANdreu Sabaté
        email                : josep.andreu@e-campus.uab.cat
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

__author__ = 'Josep ANdreu Sabaté'
__date__ = '2021-10-08'
__copyright__ = '(C) 2021 by Josep ANdreu Sabaté'

# This will get replaced with a git SHA1 when you do a git archive

__revision__ = '$Format:%H$'

from qgis.PyQt.QtCore import QCoreApplication
from qgis.PyQt.QtGui import QIcon
from qgis.core import (QgsProcessing,
                       QgsFeatureSink,
                       QgsProcessingAlgorithm,
                       QgsProcessingParameterFeatureSource,
                       QgsProcessingParameterField,
                       QgsProcessingParameterFileDestination,
                       QgsProcessingParameterBoolean,
                       QgsProcessingOutputString)

from .diversity_functions import *
import time, webbrowser

class DiversityProcessingAlgorithm(QgsProcessingAlgorithm):
    """
    This is an example algorithm that takes a vector layer and
    creates a new identical one.

    It is meant to be used as an example of how to create your own
    algorithms and explain methods and variables used to do it. An
    algorithm like this will be available in all elements, and there
    is not need for additional work.

    All Processing algorithms should extend the QgsProcessingAlgorithm
    class.
    """

    # Constants used to refer to parameters and outputs. They will be
    # used when calling the algorithm from another algorithm, or when
    # calling from the QGIS console.

    #OUTPUT = 'OUTPUT'
    #INPUT = 'INPUT'
    POLYLAYER = "POLYLAYER"
    CATEGORYFIELD = "CATEGORYFIELD"
    POINTLAYER = "POINTLAYER"
    SPECIESFIELD = "SPECIESFIELD"
    SUMMARY_DICTIONARY = "SUMMARY_DICTIONARY"
    SUMMARY_HTML = "SUMMARY_HTML"
    DETAIL = " DETAIL"



    def initAlgorithm(self, config):
        """
        Here we define the inputs and output of the algorithm, along
        with some other properties.
        """

        # We add the input vector features source. It can have any kind of
        # geometry.
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.POLYLAYER,
                self.tr('Polygon Layer'),
                [QgsProcessing.TypeVectorPolygon]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterField(
                self.CATEGORYFIELD,
                self.tr('Category Field'),
                None,
                self.POLYLAYER,
                QgsProcessingParameterField.String
            )
        )
        # pontlayer
        self.addParameter(
            QgsProcessingParameterFeatureSource(
                self.POINTLAYER,
                self.tr('Point Layer'),
                [QgsProcessing.TypeVectorPoint]
            )
        )

        # We add a feature sink in which to store our processed features (this
        # usually takes the form of a newly created vector layer when the
        # algorithm is run in QGIS).
        self.addParameter(
            QgsProcessingParameterField(
                self.SPECIESFIELD,
                self.tr('Species Field'),
                None,
                self.POINTLAYER,
                QgsProcessingParameterField.String
            )
        )

        self.addParameter(
            QgsProcessingParameterBoolean(
               self.DETAIL,
                self.tr("Include raw data"),
                True  # default value true
            )
        )

        self.addParameter(
            QgsProcessingParameterFileDestination(
                self.SUMMARY_HTML,
                self.tr("Output HTML File"),
                "HTML Files (*.html)"
            )
        )

        self.addOutput(
            QgsProcessingOutputString(
                self.SUMMARY_DICTIONARY,
                self.tr("Results (string)")
            )
        )



    def processAlgorithm(self, parameters, context, feedback):
        """
        Here is where the processing itself takes place.
        """

        # Retrieve the feature source and sink. The 'dest_id' variable is used
        # to uniquely identify the feature sink, and must be included in the
        # dictionary returned by the processAlgorithm function.

        lyrPoly = self.parameterAsSource(parameters, self.POLYLAYER, context)
        lyrPoint = self.parameterAsSource(parameters, self.POINTLAYER, context)

        fldCategory = self.parameterAsString(parameters, self.CATEGORYFIELD, context)
        fldSpecies = self.parameterAsString(parameters, self.SPECIESFIELD, context)

        outFile = self.parameterAsFileOutput(parameters, self.SUMMARY_HTML, context)
        bDetail = self.parameterAsBoolean(parameters, self.DETAIL, context)

        total = lyrPoly.featureCount()
        current = 0


        dctMain = {}
        # loop through poly features
        for poly in lyrPoly.getFeatures():
            if feedback.isCanceled():
                feedback.pushInfo("Operation canceled by user")
                break

            sCategory = poly.attribute(fldCategory)
            # in processing messages with fidback and not with QMessageBox
            feedback.pushInfo("Category: ¨{}".format(sCategory))
            #QgsMessageLog.logMessage("Category: ¨{}".format(sCategory), "Diversity Calculator", level=Qgis.Info)
            # call dc_summarizePoly in diversity_functions.py to generate a summary dictionary
            dctSummary = dc_summarizePoly(poly, lyrPoint, fldSpecies)
            feedback.pushDebugInfo("Summary: ¨{}".format(dctSummary))
            #QgsMessageLog.logMessage("Summary: ¨{}".format(dctSummary), "Diversity Calculator", level=Qgis.Info)
            # call dc_mergeDictionaries in diversity_functions.py to merge summary dictionary into the main results
            dctMain = dc_mergeDictionaries(dctMain, sCategory, dctSummary)

            current += 1
            feedback.setProgress(current/total*100)
            feedback.setProgressText("Currently on polygon {} out of {}".format(current, total))
            time.sleep(0.5)

        feedback.pushInfo(str(dctMain))

        if not feedback.isCanceled():
            f = open(outFile, "w")  # f = file w = write mode
            f.write(dc_resultHTML(dctMain, lyrPoly.sourceName(), fldCategory, bDetail))
            f.close() # close file
            # open directly the table on browser
            webbrowser.open("file://{}".format(outFile))

        # return values as a dictionary
        return {self.SUMMARY_DICTIONARY: str(dctMain),
                self.SUMMARY_HTML: outFile}

    def name(self):
        """
        Returns the algorithm name, used for identifying the algorithm. This
        string should be fixed for the algorithm, and must not be localised.
        The name should be unique within each provider. Names should contain
        lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Diversity Calculator'

    def displayName(self):
        """
        Returns the translated algorithm name, which should be used for any
        user-visible display of the algorithm name.
        """
        return self.tr(self.name())

    def group(self):
        """
        Returns the name of the group this algorithm belongs to. This string
        should be localised.
        """
        return self.tr(self.groupId())

    def groupId(self):
        """
        Returns the unique ID of the group this algorithm belongs to. This
        string should be fixed for the algorithm, and must not be localised.
        The group id should be unique within each provider. Group id should
        contain lowercase alphanumeric characters only and no spaces or other
        formatting characters.
        """
        return 'Diversity'

    def tr(self, string):
        return QCoreApplication.translate('Processing', string)

    def createInstance(self):
        return DiversityProcessingAlgorithm()

    def helpUrl(self):
        return "https://geomaps-blog.herokuapp.com/"

    def shortHelpString(self):
        str = """
        Calculates common indices of diversity for a set of polygons from a set of point observations of species.
        
        Richness, Evenness, Shannons diversity index, and simpson's diversity index are calculated for each polygon or a group of polygons that have the same category name.
        
        The points file is required to have the name of species as an attribute for the point.
        """
        return str

    def shortDescription(self):
        return "Calculates common indices of species diversity"

    def icon(self):
        return QIcon("icon.png")
